name: CI/CD Pipeline
on:
  #Manually trigger workflow runs
  workflow_dispatch:
  #Trigger the workflow on push from the main branch
  push:
    branches:
      - main
jobs:
  #Test's job
#   tests:
#     name: Unit tests
#     #Run on Ubuntu using the latest version
#     runs-on: ubuntu-latest
#     #Job's steps
#     steps:
#       #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
#       - uses: actions/checkout@v1
#       #Set up JDK 11
#       - name: Set up JDK
#         uses: actions/setup-java@v1
#         with:
#           java-version: '17'
#       #Set up Maven cache
#       - name: Cache Maven packages
#         #This action allows caching dependencies and build outputs to improve workflow execution time.
#         uses: actions/cache@v1
#         with:
#           path: ~/.m2
#           key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-m2
#       #Run Tests
#       - name: Run Tests
#         run: mvn -B test
#   #Sonar's Job
#   sonar:
#     #Depends on test's job
#     needs: tests
#     name: SonarCloud analysis
#     #Run on Ubuntu using the latest version
#     runs-on: ubuntu-latest
#     #Job's steps
#     steps:
#       #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
#       - uses: actions/checkout@v1
#       #Set up JDK 11
#       - name: Set up JDK
#         uses: actions/setup-java@v1
#         with:
#           java-version: '17'
#       #Set up SonarCloud cache
#       - name: Cache SonarCloud packages
#         #This action allows caching dependencies and build outputs to improve workflow execution time.
#         uses: actions/cache@v1
#         with:
#           path: ~/.sonar/cache
#           key: ${{ runner.os }}-sonar
#           restore-keys: ${{ runner.os }}-sonar
#       #Set up Maven cache
#       - name: Cache Maven packages
#         #This action allows caching dependencies and build outputs to improve workflow execution time.
#         uses: actions/cache@v1
#         with:
#           path: ~/.m2
#           key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-m2
#       #Analyze project with SonarCloud
#       - name: Analyze with SonarCloud
#         run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=JeremyPflipsen_githubactionsdemo
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #Build's job
  build:
    #Depends on sonar's job
#     needs: sonar
    name: Build
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Build the application using Maven
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml
      #Build the application using Maven
      - name: Upload JAR
        #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
        uses: actions/upload-artifact@v2
        with:
          #Set artifact name
          name: artifact
          #From this path
          path: target/data-0.0.1-SNAPSHOT.jar
#   #Deploy's job
deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Create ZIP deployment package
        run: zip -r deploy_package.zip ./

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Upload package to S3 bucket
        run: aws s3 cp deploy_package.zip s3://my-awesome-app-deploy-andrey/

      - name: Create new ElasticBeanstalk Application Version
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name githubactionsdemo \
          --source-bundle S3Bucket="my-awesome-app-deploy-andrey",S3Key="deploy_package.zip" \
          --version-label "ver-${{ github.sha }}" \
          --description "commit-sha-${{ github.sha }}"

      - name: Deploy new ElasticBeanstalk Application Version
        run: aws elasticbeanstalk update-environment --environment-name Githubactionsdemo-env --version-label "ver-${{ github.sha }}"
